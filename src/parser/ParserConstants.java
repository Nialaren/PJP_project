/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int NEW_LINE = 5;
  /** RegularExpression Id. */
  int ADD = 6;
  /** RegularExpression Id. */
  int SUB = 7;
  /** RegularExpression Id. */
  int EQ = 8;
  /** RegularExpression Id. */
  int MUL = 9;
  /** RegularExpression Id. */
  int DIV = 10;
  /** RegularExpression Id. */
  int MOD = 11;
  /** RegularExpression Id. */
  int CONCAT = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int OR = 14;
  /** RegularExpression Id. */
  int NOT = 15;
  /** RegularExpression Id. */
  int REL_OPERATOR = 16;
  /** RegularExpression Id. */
  int EQUAL = 17;
  /** RegularExpression Id. */
  int NOTEQUAL = 18;
  /** RegularExpression Id. */
  int GT = 19;
  /** RegularExpression Id. */
  int LT = 20;
  /** RegularExpression Id. */
  int GET = 21;
  /** RegularExpression Id. */
  int LET = 22;
  /** RegularExpression Id. */
  int TERMAL_OPERATOR = 23;
  /** RegularExpression Id. */
  int CHOOSE_OPERATOR = 24;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 25;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 26;
  /** RegularExpression Id. */
  int HEX_LITERAL = 27;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 28;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 29;
  /** RegularExpression Id. */
  int EXPONENT = 30;
  /** RegularExpression Id. */
  int STRING_LITERAL = 31;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 32;
  /** RegularExpression Id. */
  int SEMICOLON = 33;
  /** RegularExpression Id. */
  int STATEMENT = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int ELSE = 36;
  /** RegularExpression Id. */
  int WHILE = 37;
  /** RegularExpression Id. */
  int DO = 38;
  /** RegularExpression Id. */
  int END = 39;
  /** RegularExpression Id. */
  int THEN = 40;
  /** RegularExpression Id. */
  int PRINT = 41;
  /** RegularExpression Id. */
  int READ = 42;
  /** RegularExpression Id. */
  int TYPE = 43;
  /** RegularExpression Id. */
  int INT = 44;
  /** RegularExpression Id. */
  int FLOAT = 45;
  /** RegularExpression Id. */
  int BOOLEAN = 46;
  /** RegularExpression Id. */
  int STRING = 47;
  /** RegularExpression Id. */
  int ID = 48;
  /** RegularExpression Id. */
  int LETTER = 49;
  /** RegularExpression Id. */
  int DIGIT = 50;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "<SINGLE_LINE_COMMENT>",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"=\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\".\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "<REL_OPERATOR>",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"?\"",
    "\":\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<BOOLEAN_LITERAL>",
    "\";\"",
    "<STATEMENT>",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"end\"",
    "\"then\"",
    "\"print\"",
    "\"read\"",
    "<TYPE>",
    "\"int\"",
    "\"float\"",
    "\"boolean\"",
    "\"string\"",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
    "\",\"",
    "\"(\"",
    "\")\"",
  };

}
